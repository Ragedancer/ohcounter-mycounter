function revealCircle(a) {
    a.getElementsByClassName("circle")[0].classList.add("opened"), setTimeout(function() {
        document.getElementsByClassName("opened")[0].classList.remove("opened");
    }, 550);
}

function rotateIcon(a) {
    var b = a.getElementsByTagName("svg")[0];
    b.classList.contains("spinLeft") ? (b.classList.toggle("spinLeft", !1), b.classList.toggle("spinRight", !0)) : b.classList.contains("spinRight") ? (b.classList.toggle("spinLeft", !0), 
    b.classList.toggle("spinRight", !1)) : b.classList.toggle("spinLeft");
}

function buttonOpenEnterNames() {
    var a = readPlayerNumbers(), b = getCookie(newGameCookie);
    b.numPlayers = a, setCookie(newGameCookie, b), enterPlayerNames(b);
}

function buttonOpenGameSelect() {
    var a = readPlayerNames(), b = getCookie(newGameCookie);
    b.playerNames = void 0 !== a ? a : null, setCookie(newGameCookie, b), openGameSelect(b);
}

function menuOpenDice() {
    toggleHamMenu(), openDice();
}

function buttonPlayGame() {
    var a = document.getElementsByName("game-selection"), b = getCookie(newGameCookie), c = whichIsChecked(a);
    b.game = c.value, setCookie(newGameCookie, b), startGame(b);
}

function decrementCounter(a) {
    increment(a);
}

function incrementCounter(a) {
    increment(a);
}

function newCookie(a, b, c) {
    checkCookie(a) || setCookie(a, b, .0069);
}

function setCookie(a, b, c) {
    null == c && (c = 99999);
    var d = new Date();
    d.setTime(d.getTime() + 24 * c * 60 * 60 * 1e3);
    var e = "expires=" + d.toUTCString();
    document.cookie = a + "=" + JSON.stringify(b) + ";" + e + ";path=/";
}

function getCookie(a) {
    for (var b = a + "=", c = document.cookie.split(";"), d = 0; d < c.length; d++) {
        for (var e = c[d]; " " == e.charAt(0); ) e = e.substring(1);
        if (0 == e.indexOf(b)) return JSON.parse(e.substring(b.length, e.length));
    }
    return "";
}

function checkCookie(a) {
    return -1 !== document.cookie.indexOf(a + "=");
}

function openDice() {
    document.getElementById("content").innerHTML = "", loadFile("content", "template/dice.html", 1).then(function(a) {
        Promise.all([ loadFileContents("images/dice/d4.svg"), loadFileContents("images/dice/d6.svg"), loadFileContents("images/dice/d8.svg"), loadFileContents("images/dice/d10.svg"), loadFileContents("images/dice/d12.svg"), loadFileContents("images/dice/d20.svg"), loadFileContents("images/dice/Coin.svg") ]).then(function(a) {
            var b = document.getElementById("dice-holder");
            console.log(a);
            for (var c in a) b.appendChild(convertToElement(a[c]).childNodes[0]);
        });
    }), newState("dice");
}

function rollDie(a) {
    var b = Math.floor(Math.random() * a) + 1;
    document.getElementById("result").innerHTML = b;
}

function rollDice() {
    var a = document.getElementById("dice"), b = Math.floor(Math.random() * a.value) + 1;
    document.getElementById("result").innerHTML = b;
}

function coinFlip() {
    var a = Math.floor(2 * Math.random()) + 1;
    document.getElementById("result").innerHTML = 1 == a ? "Heads" : "Tails";
}

function newGame() {
    toggleHamMenu(), openNumPlayerSelect(getCookie(newGameCookie));
}

function openNumPlayerSelect(a) {
    loadFile("templates", "template/num-player-select.html").then(function(b) {
        var c = document.getElementById("content");
        if (c.innerHTML = "", newTemplate("num-players-template", [], c), null !== a.numPlayers) {
            var d = document.getElementsByName("player-selection");
            for (var e in d) "player-option-" + a.numPlayers === d[e].id && (d[e].checked = !0);
        } else newState("numPlayers", newGameCookie);
    }, function(a) {
        console.error("Failed!", a);
    });
}

function readPlayerNumbers() {
    return whichIsChecked(document.getElementsByName("player-selection")).value;
}

function enterPlayerNames(a) {
    var b = document.getElementById("content");
    b.innerHTML = "", newTemplate("player-names-template", [], b);
    for (var c = document.getElementsByClassName("player-names-input")[0], d = 0; d < a.numPlayers; d++) {
        newTemplate("new-name-template", [], c);
        var e = document.getElementById("player");
        e.setAttribute("name", "player" + d), e.setAttribute("id", "player" + d);
        var f = document.getElementById("playerLabel");
        if (f.setAttribute("for", "player" + d), f.setAttribute("id", "playerLabel" + d), 
        null !== a.playerNames) {
            var g = a.playerNames[d];
            e.value = void 0 != g ? g : "";
        }
    }
    null !== a.playerNames && void 0 !== a.playerNames || newState("playerNames", newGameCookie);
}

function readPlayerNames() {
    for (var a = document.getElementsByClassName("player-name"), b = [], c = 0; c < a.length; c++) {
        var d = document.getElementById("player" + c).value;
        b[c] = d;
    }
    return b;
}

function openGameSelect(a) {
    loadFile("templates", "template/game-select.html").then(function(b) {
        var c = document.getElementById("content");
        c.innerHTML = "", newTemplate("game-selection-template", [], c), loadFileContents("lib/json/game-list.json").then(function(b) {
            for (var c = JSON.parse(b).games, d = document.getElementById("game-selection"), e = 0; e < c.length; e++) {
                newTemplate("game-template", [], d);
                var f = document.getElementById("game-option");
                f.setAttribute("value", c[e].name), f.setAttribute("id", "game-option" + c[e].id), 
                0 !== c[e].id && c[e].name !== a.game || (f.checked = !0);
                var g = document.getElementById("game-option-label");
                g.setAttribute("for", "game-option" + c[e].id), g.setAttribute("id", "game-option-label" + c[e].id), 
                g.innerHTML = c[e].name;
            }
        }, function(a) {
            console.error("Failed to load game-list");
        });
    }, function(a) {
        console.error("Failed to load game-select!", a);
    }), newState("gameSelect", newGameCookie);
}

function startGame(a) {
    document.getElementById("content").innerHTML = "", console.log(a), loadFile("templates", "template/game.html").then(function(b) {
        var c = "games/MTG-Commander.json";
        loadFileContents("lib/json/game-list.json").then(function(b) {
            for (var d = JSON.parse(b).games, e = 0; e < d.length; e++) a.game === d[e].name && (c = d[e].template);
        }).then(function() {
            loadFileContents("lib/json/" + c).then(function(b) {
                var c = JSON.parse(b), d = a.numPlayers, e = document.createElement("div");
                e.setAttribute("id", "player-tabs");
                for (var f = 0; f < d; f++) {
                    var g = convertToElement(document.getElementById("player-tabs-template").innerHTML), h = g.getElementsByClassName("player-tab")[0];
                    h.classList.remove("player-tab"), h.classList.add("player-tab-" + f);
                    var i = g.getElementsByTagName("label")[0];
                    i.setAttribute("for", "player" + f), i.innerHTML = a.playerNames[f];
                    var j = g.getElementsByTagName("input")[0];
                    j.setAttribute("id", "player" + f);
                    var k = g.getElementsByClassName("player")[0];
                    0 === f && (j.checked = !0);
                    var l, m, n, o, p, q, r = c.primary;
                    if (r.increments.length > 1) {
                        l = convertToElement(document.getElementById("p-multi-template").innerHTML), l.getElementsByClassName("counter-name")[0].innerHTML = r.name, 
                        q = l.getElementsByClassName("counter-value")[0], q.innerHTML = r.start, q.setAttribute("id", r.id), 
                        addDataset(q, r);
                        for (var s = l.getElementsByClassName("multi-counter")[0], t = 0; t < r.increments.length; t++) m = convertToElement(document.getElementById("increment-group-template").innerHTML), 
                        o = m.getElementsByClassName("loss")[0], o.innerHTML = r.increments[t], o.dataset.counter = r.id, 
                        p = m.getElementsByClassName("gain")[0], p.innerHTML = r.increments[t], p.dataset.counter = r.id, 
                        appendChildNodes(m, s);
                        appendChildNodes(l, k);
                    } else l = convertToElement(document.getElementById("p-single-template").innerHTML), 
                    l.getElementsByClassName("counter-name")[0].innerHTML = r.name, q = l.getElementsByClassName("counter-value")[0], 
                    q.innerHTML = r.start, q.setAttribute("id", r.id), addDataset(q, r), o = l.getElementsByClassName("loss")[0], 
                    o.innerHTML = r.increments[0], o.dataset.counter = r.id, p = l.getElementsByClassName("gain")[0], 
                    p.innerHTML = r.increments[0], p.dataset.counter = r.id, appendChildNodes(l, k);
                    for (var u = c.secondary, v = 0; v < u.length; v++) {
                        var w = u[v];
                        if (w.increments.length > 1) {
                            l = convertToElement(document.getElementById("s-multi-template").innerHTML), l.getElementsByClassName("counter-name")[0].innerHTML = w.name, 
                            q = l.getElementsByClassName("counter-value")[0], q.innerHTML = w.start, q.setAttribute("id", w.id), 
                            addDataset(q, w);
                            for (var x = l.getElementsByClassName("multi-counter")[0], y = 0; y < w.increments.length; y++) m = convertToElement(document.getElementById("increment-group-template").innerHTML), 
                            o = m.getElementsByClassName("loss")[0], o.innerHTML = w.increments[y], o.dataset.counter = w.id, 
                            p = m.getElementsByClassName("gain")[0], p.innerHTML = w.increments[y], p.dataset.counter = w.id, 
                            appendChildNodes(m, x);
                            appendChildNodes(l, k);
                        } else l = convertToElement(document.getElementById("s-single-template").innerHTML), 
                        l.getElementsByClassName("counter-name")[0].innerHTML = w.name, q = l.getElementsByClassName("counter-value")[0], 
                        q.innerHTML = w.start, q.setAttribute("id", w.id), addDataset(q, w), n = w.increments[0], 
                        o = l.getElementsByClassName("loss")[0], o.innerHTML = void 0 !== n ? n : w.increments, 
                        o.dataset.counter = w.id, p = l.getElementsByClassName("gain")[0], p.innerHTML = void 0 !== n ? n : w.increments, 
                        p.dataset.counter = w.id, appendChildNodes(l, k);
                    }
                    for (var z = c.tertiary, A = 0; A < z.length; A++) {
                        var B = z[A];
                        l = convertToElement(document.getElementById("t-single-template").innerHTML), l.getElementsByClassName("counter-name")[0].innerHTML = B.name, 
                        q = l.getElementsByClassName("counter-value")[0], q.innerHTML = B.start, q.setAttribute("id", B.id), 
                        addDataset(q, B), n = B.increments[0], o = l.getElementsByClassName("loss")[0], 
                        o.innerHTML = void 0 !== n ? n : B.increments, o.dataset.counter = B.id, p = l.getElementsByClassName("gain")[0], 
                        p.innerHTML = void 0 !== n ? n : B.increments, p.dataset.counter = B.id, appendChildNodes(l, k);
                    }
                    appendChildNodes(g, e);
                }
                e.childNodes[0].getElementsByClassName("player")[0].classList.add("active"), document.getElementById("content").appendChild(e);
            });
        });
    }), newState("game-start");
}

function addDataset(a, b) {
    var c, d;
    c = "null" === b.min ? "" : b.min, d = null === b.max ? "" : b.max, a.dataset.start = b.start, 
    a.dataset.min = c, a.dataset.max = d, a.dataset.value = b.value;
}

function increment(a) {
    var b = document.getElementById(a.dataset.counter), c = b.innerHTML, d = a.classList.contains("loss") ? "-" + a.innerHTML : a.innerHTML;
    c = parseInt(c, 10) + parseInt(d, 10), data = b.dataset;
    var e = data.min, f = data.max;
    "null" !== e && null !== e && void 0 !== e && "" !== e && (c = parseInt(c, 10) >= parseInt(e, 10) ? c : e), 
    "null" !== f && null !== f && void 0 !== f && "" !== f && (c = parseInt(c, 10) <= parseInt(f, 10) ? c : f), 
    b.innerHTML = c, b.dataset.value = c;
}

function activatePlayer(a) {
    for (var b = document.getElementById("player-tabs"), c = 0; c < b.childElementCount; c++) {
        var a = b.childNodes[c].getElementsByTagName("input")[0];
        a.parentNode.getElementsByClassName("player")[0].classList.toggle("active", a.checked);
    }
}

function domLoad(a) {
    var b = a.name, c = a.cookie, d = getCookie(c);
    switch (console.log("pop: " + b), b) {
      case "numPlayers":
        openNumPlayerSelect(d);
        break;

      case "playerNames":
        enterPlayerNames(d);
        break;

      case "gameSelect":
        openGameSelect(d);
        break;

      case "dice":
        openDice(d);
    }
}

function newState(a, b) {
    var c = {
        name: a,
        cookie: b
    };
    console.log("push: " + a), history.pushState(c, null, null);
}

function toggleShow(a) {
    document.getElementById(a).classList.toggle("show");
}

function toggleCover(a) {
    document.getElementById(a).classList.toggle("hide");
}

function toggleFabMenu() {
    rotateIcon(document.getElementById("fab")), toggleShow("fab-menu-items"), toggleCover("fab-menu-items-active");
}

function toggleHamMenu() {
    toggleShow("menu"), toggleCover("menu-active");
}

function addPlayer() {
    var a = document.getElementById("name").value, b = document.createElement("p");
    b.setAttribute("class", "player");
    var c = document.createTextNode(a);
    b.appendChild(c), document.getElementById("playerList").appendChild(b);
}

function randPlayer() {
    var a = document.getElementsByClassName("player"), b = a.length, c = Math.floor(Math.random() * b);
    document.getElementById("testArea").innerHTML = a[c].innerHTML;
}

function convertToElement(a) {
    var b = document.createElement("div");
    return b.innerHTML = a, b;
}

function appendChildNodes(a, b) {
    for (;a.firstChild; ) {
        var c = a.firstChild;
        a.removeChild(c), 3 !== c.nodeType && b.appendChild(c);
    }
}

function loadFile(a, b, c) {
    return new Promise(function(d, e) {
        var f = new XMLHttpRequest();
        f.open("GET", b, !0), f.onload = function() {
            200 !== f.status && e(Error(f.statusText));
            var b = document.getElementById(a);
            1 === c ? b.appendChild(convertToElement(f.response).childNodes[0]) : b.appendChild(convertToElement(f.response)), 
            d(f.response);
        }, f.onerror = function() {
            e(Error("Network Error"));
        }, f.send();
    });
}

function loadFileContents(a) {
    return new Promise(function(b, c) {
        var d = new XMLHttpRequest();
        d.open("GET", a, !0), d.onload = function() {
            200 !== d.status && c(Error(d.statusText)), b(d.response);
        }, d.onerror = function() {
            c(Error("Network Error"));
        }, d.send();
    });
}

function newTemplate(a, b, c) {
    var d = document.getElementById(a).innerHTML, e = convertToElement(d);
    for (var f in b) {
        var g = b[f];
        e.getElementsByClassName(f)[0].innerHTML = g;
    }
    appendChildNodes(e, c);
}

function newTemplateArray(a, b, c) {
    for (var d in b) newTemplate(a, b[d], c);
}

function whichIsChecked(a) {
    for (var b = 0; b < a.length; b++) if (a[b].checked) return a[b];
}

var newGameCookie = "GameInitCookie";

document.addEventListener("DOMContentLoaded", function() {
    loadFileContents("lib/json/game-creation-cookie-template.json").then(function(a) {
        var b = JSON.parse(a);
        newCookie(newGameCookie, b, .0069);
        getCookie(newGameCookie);
        openNumPlayerSelect(b);
    }), window.addEventListener("popstate", function(a) {
        domLoad(a.state);
    });
});