function revealCircle(a) {
    a.getElementsByClassName("circle")[0].classList.add("opened"), setTimeout(function() {
        document.getElementsByClassName("opened")[0].classList.remove("opened");
    }, 550);
}

function rotateIcon(a) {
    var b = a.getElementsByTagName("svg")[0];
    b.classList.contains("spinLeft") ? (b.classList.toggle("spinLeft", !1), b.classList.toggle("spinRight", !0)) : b.classList.contains("spinRight") ? (b.classList.toggle("spinLeft", !0), 
    b.classList.toggle("spinRight", !1)) : b.classList.toggle("spinLeft");
}

function buttonOpenEnterNames() {
    var a = readPlayerNumbers(), b = getCookie(newGameCookie);
    b.numPlayers = a, setCookie(newGameCookie, b), enterPlayerNames(b);
}

function buttonOpenGameSelect() {
    var a = readPlayerNames(), b = getCookie(newGameCookie);
    b.playerNames = void 0 !== a ? a : null, setCookie(newGameCookie, b), openGameSelect(b);
}

function menuOpenDice() {
    toggleHamMenu(), openDice();
}

function buttonPlayGame() {
    var a = document.getElementsByName("game-selection"), b = getCookie(newGameCookie), c = whichIsChecked(a);
    b.game = c.value, setCookie(newGameCookie, b), startGame(b);
}

function decrementCounter(a) {
    increment(a);
}

function incrementCounter(a) {
    increment(a);
}

function newCookie(a, b, c) {
    checkCookie(a) && !checkCookieContents(a, b) || setCookie(a, b, c);
}

function setCookie(a, b, c) {
    null == c && (c = 99999);
    var d = new Date();
    d.setTime(d.getTime() + 24 * c * 60 * 60 * 1e3);
    var e = "expires=" + d.toUTCString();
    document.cookie = a + "=" + JSON.stringify(b) + ";" + e + ";path=/";
}

function getCookie(a) {
    for (var b = a + "=", c = document.cookie.split(";"), d = 0; d < c.length; d++) {
        for (var e = c[d]; " " == e.charAt(0); ) e = e.substring(1);
        if (0 == e.indexOf(b)) return JSON.parse(e.substring(b.length, e.length));
    }
    return "";
}

function checkCookie(a) {
    return -1 !== document.cookie.indexOf(a + "=");
}

function checkCookieContents(a, b) {
    var c = JSON.stringify(getCookie(a));
    return JSON.stringify(b) !== c;
}

function openDice() {
    document.getElementById("content").innerHTML = "", loadFile("content", "template/dice.html", 1).then(function(a) {
        Promise.all([ loadFileContents("images/dice/d4.svg"), loadFileContents("images/dice/d6.svg"), loadFileContents("images/dice/d8.svg"), loadFileContents("images/dice/d10.svg"), loadFileContents("images/dice/d12.svg"), loadFileContents("images/dice/d20.svg"), loadFileContents("images/dice/Coin.svg") ]).then(function(a) {
            var b = document.getElementById("dice-holder");
            console.log(a);
            for (var c in a) b.appendChild(convertToElement(a[c]).childNodes[0]);
        });
    }), newState("dice");
}

function rollDie(a) {
    var b = Math.floor(Math.random() * a) + 1;
    document.getElementById("result").innerHTML = b;
}

function rollDice() {
    var a = document.getElementById("dice"), b = Math.floor(Math.random() * a.value) + 1;
    document.getElementById("result").innerHTML = b;
}

function coinFlip() {
    var a = Math.floor(2 * Math.random()) + 1;
    document.getElementById("result").innerHTML = 1 == a ? "Heads" : "Tails";
}

function newGame() {
    toggleHamMenu(), openNumPlayerSelect(getCookie(newGameCookie));
}

function openNumPlayerSelect(a) {
    loadFile("templates", "template/num-player-select.html").then(function(b) {
        var c = document.getElementById("content");
        if (c.innerHTML = "", newTemplate("num-players-template", [], c), null !== a.numPlayers) {
            var d = document.getElementsByName("player-selection");
            for (var e in d) "player-option-" + a.numPlayers === d[e].id && (d[e].checked = !0);
        } else newState("numPlayers", newGameCookie);
    }, function(a) {
        console.error("Failed!", a);
    });
}

function readPlayerNumbers() {
    return whichIsChecked(document.getElementsByName("player-selection")).value;
}

function enterPlayerNames(a) {
    var b = document.getElementById("content");
    b.innerHTML = "", newTemplate("player-names-template", [], b);
    for (var c = document.getElementsByClassName("player-names-input")[0], d = 0; d < a.numPlayers; d++) {
        newTemplate("new-name-template", [], c);
        var e = document.getElementById("player");
        e.setAttribute("name", "player" + d), e.setAttribute("id", "player" + d);
        var f = document.getElementById("playerLabel");
        if (f.setAttribute("for", "player" + d), f.setAttribute("id", "playerLabel" + d), 
        null !== a.playerNames) {
            var g = a.playerNames[d];
            e.value = void 0 != g ? g : "";
        }
    }
    null !== a.playerNames && void 0 !== a.playerNames || newState("playerNames", newGameCookie);
}

function readPlayerNames() {
    for (var a = document.getElementsByClassName("player-name"), b = [], c = 0; c < a.length; c++) {
        var d = document.getElementById("player" + c).value;
        b[c] = d;
    }
    return b;
}

function openGameSelect(a) {
    loadFile("templates", "template/game-select.html").then(function(b) {
        var c = document.getElementById("content");
        c.innerHTML = "", newTemplate("game-selection-template", [], c), loadFileContents("lib/json/game-list.json").then(function(b) {
            for (var c = JSON.parse(b).games, d = document.getElementById("game-selection"), e = 0; e < c.length; e++) {
                newTemplate("game-template", [], d);
                var f = document.getElementById("game-option");
                f.setAttribute("value", c[e].name), f.setAttribute("id", "game-option" + c[e].id), 
                0 !== c[e].id && c[e].name !== a.game || (f.checked = !0);
                var g = document.getElementById("game-option-label");
                g.setAttribute("for", "game-option" + c[e].id), g.setAttribute("id", "game-option-label" + c[e].id), 
                g.innerHTML = c[e].name;
            }
        }, function(a) {
            console.error("Failed to load game-list");
        });
    }, function(a) {
        console.error("Failed to load game-select!", a);
    }), newState("gameSelect", newGameCookie);
}

function startGame(a) {
    document.getElementById("content").innerHTML = "", createGameCookie(a).then(function(a) {
        setUpGame(a);
    }), newState("game-start");
}

function createGameCookie(a) {
    return new Promise(function(b, c) {
        var d = "games/MTG-Commander.json";
        loadFileContents("lib/json/game-list.json").then(function(b) {
            for (var c = JSON.parse(b).games, e = 0; e < c.length; e++) a.game === c[e].name && (d = c[e].template);
        }).then(function() {
            loadFileContents("lib/json/" + d).then(function(c) {
                for (var d = c, e = a.numPlayers, f = [], g = 0; g < e; g++) f[g] = JSON.parse(d), 
                f[g].playerName = a.playerNames[g];
                newCookie(recentGameCookie, f), b(f);
            });
        });
    });
}

function setUpGame(a) {
    loadFile("templates", "template/game.html").then(function(b) {
        var c = a.length, d = document.createElement("div");
        d.setAttribute("id", "player-tabs");
        var e = document.createElement("div");
        e.classList.add("player-tabs"), e.classList.add("tabGroup1");
        var f = document.createElement("div");
        f.classList.add("player-tabs"), f.classList.add("tabGroup2");
        var g = document.createElement("div");
        g.setAttribute("id", "players");
        for (var h = 0; h < c; h++) {
            var i = a[h], j = convertToElement(document.getElementById("player-tab-template").innerHTML);
            j.getElementsByClassName("player-tab")[0].classList.add("player-tab-" + c);
            var k = j.getElementsByTagName("label")[0];
            k.setAttribute("for", "player" + h), k.innerHTML = i.playerName;
            var l = j.getElementsByTagName("input")[0];
            l.setAttribute("id", "player" + h);
            var m = document.createElement("div");
            m.classList.add("player"), m.classList.add(l.id), 0 === h && (l.checked = !0);
            var n, o, p = i.primary;
            if (p.increments.length > 1) {
                n = convertToElement(document.getElementById("p-multi-template").innerHTML), n.getElementsByClassName("counter-name")[0].innerHTML = p.name, 
                o = n.getElementsByClassName("counter-value")[0], o.innerHTML = p.start, addDataset(o, p);
                createCounterGroup(p, n.getElementsByClassName("multi-counter")[0]), appendChildNodes(n, m);
            } else createCounter("p-single-template", p, m);
            for (var q = i.secondary, r = 0; r < q.length; r++) {
                var s = q[r];
                if (s.increments.length > 1) {
                    n = convertToElement(document.getElementById("s-multi-template").innerHTML), n.getElementsByClassName("counter-name")[0].innerHTML = s.name, 
                    o = n.getElementsByClassName("counter-value")[0], o.innerHTML = s.start, addDataset(o, s);
                    createCounterGroup(s, n.getElementsByClassName("multi-counter")[0]), appendChildNodes(n, m);
                } else createCounter("s-single-template", s, m);
            }
            for (var t = i.tertiary, u = 0; u < t.length; u++) {
                createCounter("t-single-template", t[u], m);
            }
            h > 3 ? appendChildNodes(j, f) : appendChildNodes(j, e), g.appendChild(m);
        }
        d.appendChild(e), c > 4 && d.appendChild(f), document.getElementById("content").appendChild(d), 
        document.getElementById("content").appendChild(g), document.getElementsByClassName("player")[0].classList.add("active");
    });
}

function createCounterGroup(a, b) {
    for (var c = 0; c < a.increments.length; c++) {
        var d = convertToElement(document.getElementById("increment-group-template").innerHTML);
        loss = d.getElementsByClassName("loss")[0], loss.innerHTML = a.increments[c], loss.dataset.counter = a.id, 
        gain = d.getElementsByClassName("gain")[0], gain.innerHTML = a.increments[c], gain.dataset.counter = a.id, 
        appendChildNodes(d, b);
    }
}

function createCounter(a, b, c) {
    var d = convertToElement(document.getElementById(a).innerHTML);
    d.getElementsByClassName("counter-name")[0].innerHTML = b.name, count = d.getElementsByClassName("counter-value")[0], 
    count.innerHTML = b.start, addDataset(count, b);
    var e = b.increments[0];
    loss = d.getElementsByClassName("loss")[0], loss.innerHTML = void 0 !== e ? e : b.increments, 
    loss.dataset.counter = b.id, gain = d.getElementsByClassName("gain")[0], gain.innerHTML = void 0 !== e ? e : b.increments, 
    gain.dataset.counter = b.id, appendChildNodes(d, c);
}

function addDataset(a, b) {
    var c, d;
    c = "null" === b.min ? "" : b.min, d = null === b.max ? "" : b.max, a.dataset.start = b.start, 
    a.dataset.min = c, a.dataset.max = d, a.dataset.value = b.value;
}

function increment(a) {
    var b = getCounterValue(a), c = b.innerHTML, d = a.classList.contains("loss") ? "-" + a.innerHTML : a.innerHTML;
    c = parseInt(c, 10) + parseInt(d, 10), data = b.dataset;
    var e = data.min, f = data.max;
    "null" !== e && null !== e && void 0 !== e && "" !== e && (c = parseInt(c, 10) >= parseInt(e, 10) ? c : e), 
    "null" !== f && null !== f && void 0 !== f && "" !== f && (c = parseInt(c, 10) <= parseInt(f, 10) ? c : f), 
    b.innerHTML = c, b.dataset.value = c;
}

function activatePlayer() {
    for (var a = document.getElementById("player-tabs"), b = 0; b < a.childElementCount; b++) for (var c = a.childNodes[b], d = 0; d < c.childElementCount; d++) {
        var e = c.childNodes[d].getElementsByTagName("input")[0], f = document.getElementsByClassName(e.id)[0];
        f.classList.toggle("active", e.checked);
    }
}

function getCounterValue(a) {
    for (var b = null, c = a.parentNode; null === b; ) c.classList.contains("primary") || c.classList.contains("secondary") || c.classList.contains("tertiary") ? b = c.getElementsByClassName("counter-value")[0] : c = c.parentNode;
    return b;
}

function domLoad(a) {
    var b = a.name, c = a.cookie, d = getCookie(c);
    switch (console.log("pop: " + b), b) {
      case "numPlayers":
        openNumPlayerSelect(d);
        break;

      case "playerNames":
        enterPlayerNames(d);
        break;

      case "gameSelect":
        openGameSelect(d);
        break;

      case "dice":
        openDice(d);
    }
}

function newState(a, b) {
    var c = {
        name: a,
        cookie: b
    };
    console.log("push: " + a), history.pushState(c, null, null);
}

function toggleShow(a) {
    document.getElementById(a).classList.toggle("show");
}

function toggleCover(a) {
    document.getElementById(a).classList.toggle("hide");
}

function toggleFabMenu() {
    rotateIcon(document.getElementById("fab")), toggleShow("fab-menu-items"), toggleCover("fab-menu-items-active");
}

function toggleHamMenu() {
    toggleShow("menu"), toggleCover("menu-active");
}

function addPlayer() {
    var a = document.getElementById("name").value, b = document.createElement("p");
    b.setAttribute("class", "player");
    var c = document.createTextNode(a);
    b.appendChild(c), document.getElementById("playerList").appendChild(b);
}

function randPlayer() {
    var a = document.getElementsByClassName("player"), b = a.length, c = Math.floor(Math.random() * b);
    document.getElementById("testArea").innerHTML = a[c].innerHTML;
}

function convertToElement(a) {
    var b = document.createElement("div");
    return b.innerHTML = a, b;
}

function appendChildNodes(a, b) {
    for (;a.firstChild; ) {
        var c = a.firstChild;
        a.removeChild(c), 3 !== c.nodeType && b.appendChild(c);
    }
}

function loadFile(a, b, c) {
    return new Promise(function(d, e) {
        var f = new XMLHttpRequest();
        f.open("GET", b, !0), f.onload = function() {
            200 !== f.status && e(Error(f.statusText));
            var b = document.getElementById(a);
            1 === c ? b.appendChild(convertToElement(f.response).childNodes[0]) : b.appendChild(convertToElement(f.response)), 
            d(f.response);
        }, f.onerror = function() {
            e(Error("Network Error"));
        }, f.send();
    });
}

function loadFileContents(a) {
    return new Promise(function(b, c) {
        var d = new XMLHttpRequest();
        d.open("GET", a, !0), d.onload = function() {
            200 !== d.status && c(Error(d.statusText)), b(d.response);
        }, d.onerror = function() {
            c(Error("Network Error"));
        }, d.send();
    });
}

function newTemplate(a, b, c) {
    var d = document.getElementById(a).innerHTML, e = convertToElement(d);
    for (var f in b) {
        var g = b[f];
        e.getElementsByClassName(f)[0].innerHTML = g;
    }
    appendChildNodes(e, c);
}

function newTemplateArray(a, b, c) {
    for (var d in b) newTemplate(a, b[d], c);
}

function whichIsChecked(a) {
    for (var b = 0; b < a.length; b++) if (a[b].checked) return a[b];
}

var newGameCookie = "GameInitCookie";

document.addEventListener("DOMContentLoaded", function() {
    loadFileContents("lib/json/game-creation-cookie-template.json").then(function(a) {
        var b = JSON.parse(a);
        checkCookie(newGameCookie) ? b = getCookie(newGameCookie) : newCookie(newGameCookie, b, .0069), 
        openNumPlayerSelect(b);
    }), window.addEventListener("popstate", function(a) {
        domLoad(a.state);
    });
});

var recentGameCookie = "RecentGame";