var alertTimer;

function closeAlert() {
    window.clearTimeout(alertTimer), document.getElementsByClassName("alert")[0].classList.toggle("hide", !0), 
    document.getElementById("alert-active").classList.toggle("hide", !0);
}

function revealCircle(e) {
    e.getElementsByClassName("circle")[0].classList.add("opened"), setTimeout(function() {
        document.getElementsByClassName("opened")[0].classList.remove("opened");
    }, 550);
}

function rotateIcon(e) {
    var t = e.getElementsByTagName("svg")[0];
    t.classList.contains("spinLeft") ? (t.classList.toggle("spinLeft", !1), t.classList.toggle("spinRight", !0)) : t.classList.contains("spinRight") ? (t.classList.toggle("spinLeft", !0), 
    t.classList.toggle("spinRight", !1)) : t.classList.toggle("spinLeft");
}

function buttonActionPrompt() {
    switch (whichIsChecked(document.getElementsByName("action-prompt-selection")).value) {
      case "resume":
        checkCookie(recentGameCookie) && openGame(getCookie(recentGameCookie));
        break;

      case "newGame":
        startNewGame(), newState("numPlayers", newGameCookie);
        break;

      default:
        startNewGame(), newState("numPlayers", newGameCookie);
    }
}

function buttonOpenEnterNames() {
    var e = readPlayerNumbers(), t = getCookie(newGameCookie);
    t.numPlayers = e, setCookie(newGameCookie, t), enterPlayerNames(t), newState("playerNames", newGameCookie);
}

function buttonOpenGameSelect() {
    var e = readPlayerNames(), t = getCookie(newGameCookie);
    t.playerNames = void 0 !== e ? e : null, setCookie(newGameCookie, t), openGameSelect(t), 
    newState("gameSelect", newGameCookie);
}

function buttonSelectRandPlayer() {
    randPlayer();
}

function buttonSelectAllRandPlayer() {
    selectAllPlayers();
}

function menuOpenDice() {
    toggleHamMenu(), openDice(), newState("dice");
}

function menuRandPlayer() {
    toggleHamMenu(), openRandPlayer(getCookie(recentGameCookie)), newState("randPlayer");
}

function menuResetGame() {
    toggleHamMenu(), resetGame();
}

function buttonPlayGame() {
    var e = document.getElementsByName("game-selection"), t = getCookie(newGameCookie), n = whichIsChecked(e);
    t.game = n.value, setCookie(newGameCookie, t), startGame(t);
}

function decrementCounter(e) {
    increment(e);
}

function incrementCounter(e) {
    increment(e);
}

function newCookie(e, t, n) {
    checkCookie(e) && !checkCookieContents(e, t) || setCookie(e, t, n);
}

function setCookie(e, t, n) {
    null == n && (n = 99999);
    var a = new Date();
    a.setTime(a.getTime() + 24 * n * 60 * 60 * 1e3);
    var o = "expires=" + a.toUTCString();
    document.cookie = e + "=" + JSON.stringify(t) + ";" + o + ";path=/";
}

function getCookie(e) {
    for (var t = e + "=", n = document.cookie.split(";"), a = 0; a < n.length; a++) {
        for (var o = n[a]; " " == o.charAt(0); ) o = o.substring(1);
        if (0 == o.indexOf(t)) return JSON.parse(o.substring(t.length, o.length));
    }
    return "";
}

function checkCookie(e) {
    return -1 !== document.cookie.indexOf(e + "=");
}

function checkCookieContents(e, t) {
    var n = JSON.stringify(getCookie(e));
    return JSON.stringify(t) !== n;
}

function openDice() {
    document.getElementById("content").innerHTML = "", loadFile("content", "template/dice.html", 1).then(function(e) {
        Promise.all([ loadFileContents("images/dice/d4.svg"), loadFileContents("images/dice/d6.svg"), loadFileContents("images/dice/d8.svg"), loadFileContents("images/dice/d10.svg"), loadFileContents("images/dice/d12.svg"), loadFileContents("images/dice/d20.svg"), loadFileContents("images/dice/Coin.svg") ]).then(function(e) {
            var t = document.getElementById("dice-holder");
            for (var n in e) t.appendChild(convertToElement(e[n]).childNodes[0]);
        });
    });
}

function rollDie(e) {
    var t = Math.floor(Math.random() * e) + 1;
    document.getElementById("result").innerHTML = t;
}

function rollDice() {
    var e = document.getElementById("dice"), t = Math.floor(Math.random() * e.value) + 1;
    document.getElementById("result").innerHTML = t;
}

function coinFlip() {
    var e = Math.floor(2 * Math.random()) + 1;
    document.getElementById("result").innerHTML = 1 == e ? "Heads" : "Tails";
}

window.alert = function(e, t, n, a) {
    var o = document.getElementsByClassName("alert")[0];
    o.getElementsByClassName("title")[0].innerHTML = void 0 !== e || null !== e ? e : "", 
    o.getElementsByClassName("message")[0].innerHTML = t, o.classList.toggle("hide", !1);
    var r = document.getElementById("alert-active");
    switch (r.classList.toggle("hide", !1), n) {
      case "anounce":
        o.classList.toggle("alert-anounce", !0), o.classList.toggle("alert-error", !1);
        break;

      case "error":
        o.classList.toggle("alert-anounce", !1), o.classList.toggle("alert-error", !0);
        break;

      default:
        o.classList.toggle("alert-anounce", !1), o.classList.toggle("alert-error", !1);
    }
    alertTimer = window.setTimeout(function() {
        o.classList.toggle("hide", !0), r.classList.toggle("hide", !0);
    }, void 0 !== a ? a : 5e3);
};

var newGameCookie = "GameInitCookie";

function actionPrompt() {
    clearScreen();
    var t = document.getElementById("content");
    loadFile("templates", "template/action-prompt.html").then(function(e) {
        newTemplate("action-prompt-template", [], t), loadFileContents("lib/json/action-prompt.json").then(function(e) {
            for (var t = JSON.parse(e).options, n = document.getElementById("action-selection"), a = "action-option", o = "action-option-label", r = 0; r < t.length; r++) if ("resume" !== t[r].value || checkCookie(recentGameCookie)) {
                newTemplate("action-template", [], n);
                var l = document.getElementById(a);
                l.setAttribute("value", t[r].value), l.setAttribute("id", a + t[r].id);
                var i = document.getElementById(o);
                i.setAttribute("for", a + t[r].id), i.setAttribute("id", o + t[r].id), i.innerHTML = t[r].name;
            }
            n.getElementsByTagName("input")[0].checked = !0;
        });
    });
}

function startNewGame() {
    loadFileContents("lib/json/game-creation-cookie-template.json").then(function(e) {
        var t = JSON.parse(e);
        checkCookie(newGameCookie) ? t = getCookie(newGameCookie) : newCookie(newGameCookie, t, .0069), 
        openNumPlayerSelect(t);
    });
}

function newGame() {
    toggleHamMenu(), openNumPlayerSelect(getCookie(newGameCookie));
}

function openNumPlayerSelect(o) {
    loadFile("templates", "template/num-player-select.html").then(function(e) {
        var t = document.getElementById("content");
        if (clearScreen(), newTemplate("num-players-template", [], t), null !== o.numPlayers) {
            var n = document.getElementsByName("player-selection");
            for (var a in n) "player-option-" + o.numPlayers === n[a].id && (n[a].checked = !0);
        }
    }, function(e) {
        console.error("Failed!", e);
    });
}

function readPlayerNumbers() {
    return whichIsChecked(document.getElementsByName("player-selection")).value;
}

function enterPlayerNames(e) {
    var t = document.getElementById("content");
    clearScreen(), newTemplate("player-names-template", [], t);
    for (var n = document.getElementsByClassName("player-names-input")[0], a = "player", o = "playerLabel", r = 0; r < e.numPlayers; r++) {
        newTemplate("new-name-template", [], n);
        var l = document.getElementById(a);
        l.setAttribute("name", a + r), l.setAttribute("id", a + r);
        var i = document.getElementById(o);
        if (i.setAttribute("for", a + r), i.setAttribute("id", o + r), null !== e.playerNames) {
            var s = e.playerNames[r];
            l.value = null != s ? s : "";
        }
    }
}

function readPlayerNames() {
    for (var e = document.getElementsByClassName("player-name"), t = [], n = 0; n < e.length; n++) {
        var a = document.getElementById("player" + n).value;
        t[n] = a;
    }
    return t;
}

function openGameSelect(s) {
    loadFile("templates", "template/game-select.html").then(function(e) {
        var t = document.getElementById("content");
        clearScreen(), newTemplate("game-selection-template", [], t), loadFileContents("lib/json/game-list.json").then(function(e) {
            for (var t = JSON.parse(e).games, n = document.getElementById("game-selection"), a = "game-option", o = "game-option-label", r = 0; r < t.length; r++) {
                newTemplate("game-template", [], n);
                var l = document.getElementById(a);
                l.setAttribute("value", t[r].name), l.setAttribute("id", a + t[r].id), 0 !== t[r].id && t[r].name !== s.game || (l.checked = !0);
                var i = document.getElementById(o);
                i.setAttribute("for", a + t[r].id), i.setAttribute("id", o + t[r].id), i.innerHTML = t[r].name;
            }
        }, function(e) {
            console.error("Failed to load game-list");
        });
    }, function(e) {
        console.error("Failed to load game-select!", e);
    });
}

document.addEventListener("DOMContentLoaded", function() {
    actionPrompt(), newState("actionPrompt"), window.addEventListener("popstate", function(e) {
        domLoad(e.state);
    });
});

var recentGameCookie = "RecentGame";

function startGame(e) {
    createGameCookie(e).then(function(e) {
        openGame(e);
    }), newState("game", recentGameCookie);
}

function createGameCookie(l) {
    return new Promise(function(r, e) {
        var a = "games/MTG-Commander.json";
        loadFileContents("lib/json/game-list.json").then(function(e) {
            for (var t = JSON.parse(e).games, n = 0; n < t.length; n++) l.game === t[n].name && (a = t[n].template);
        }).then(function() {
            loadFileContents("lib/json/" + a).then(function(e) {
                for (var t = e, n = l.numPlayers, a = [], o = 0; o < n; o++) a[o] = JSON.parse(t), 
                a[o].playerName = l.playerNames[o], resetCounter(a[o].primary), resetCounters(a[o].secondary), 
                resetCounters(a[o].tertiary);
                setCookie(recentGameCookie, a), r(a);
            });
        });
    });
}

function resetCounter(e) {
    e.value = e.start;
}

function resetCounters(e) {
    for (var t = 0; t < e.length; t++) e[t].value = e[t].start;
}

function resetGame() {
    for (var e = getCookie(recentGameCookie), t = 0; t < e.length; t++) resetCounter(e[t].primary), 
    resetCounters(e[t].secondary), resetCounters(e[t].tertiary);
    setCookie(recentGameCookie, e), openGame(e);
}

function openGame(e) {
    clearScreen(), setUpGame(e);
}

function setUpGame(C) {
    loadFile("templates", "template/game.html").then(function(e) {
        var t = C.length, n = document.createElement("div");
        n.setAttribute("id", "player-tabs");
        var a = document.createElement("div");
        a.classList.add("horizontal-name-selection"), a.classList.add("tabGroup1"), a.classList.add("input-invert");
        var o = document.createElement("div");
        o.classList.add("horizontal-name-selection"), o.classList.add("tabGroup2"), o.classList.add("input-invert");
        var r = document.createElement("div");
        r.setAttribute("id", "players");
        for (var l = 0; l < t; l++) {
            var i = C[l], s = convertToElement(document.getElementById("player-tab-template").innerHTML);
            s.getElementsByClassName("item")[0].classList.add("item-" + t);
            var c = s.getElementsByTagName("label")[0];
            c.setAttribute("for", "player" + l), c.innerHTML = i.playerName;
            var m = s.getElementsByTagName("input")[0];
            m.setAttribute("id", "player" + l);
            var d = document.createElement("div");
            d.classList.add("player"), d.classList.add(m.id), 0 === l && (m.checked = !0);
            var u = i.primary;
            1 < u.increments.length ? createCounterGroup("p-multi-template", u, d, l) : createCounter("p-single-template", u, d, l);
            for (var g = i.secondary, p = 0; p < g.length; p++) {
                var y = g[p];
                1 < y.increments.length ? createCounterGroup("s-multi-template", y, d, l) : createCounter("s-single-template", y, d, l);
            }
            for (var v = i.tertiary, f = 0; f < v.length; f++) {
                createCounter("t-single-template", v[f], d, l);
            }
            appendChildNodes(s, 3 < l ? o : a), r.appendChild(d);
        }
        n.appendChild(a), 4 < t && n.appendChild(o), document.getElementById("content").appendChild(n), 
        document.getElementById("content").appendChild(r), document.getElementsByClassName("player")[0].classList.add("active");
    });
}

function createCounterGroup(e, t, n, a) {
    for (var o = createCounterValueGroup(e, t, a), r = o.getElementsByClassName("multi-counter")[0], l = 0; l < t.increments.length; l++) {
        var i = convertToElement(document.getElementById("increment-group-template").innerHTML), s = t.increments[l];
        createIncrement(i, "loss", s, t), createIncrement(i, "gain", s, t), appendChildNodes(i, r);
    }
    appendChildNodes(o, n);
}

function createCounter(e, t, n, a) {
    var o = createCounterValueGroup(e, t, a), r = t.increments[0];
    createIncrement(o, "loss", r, t), createIncrement(o, "gain", r, t), appendChildNodes(o, n);
}

function createCounterValueGroup(e, t, n) {
    var a = convertToElement(document.getElementById(e).innerHTML);
    a.getElementsByClassName("counter-name")[0].innerHTML = t.name;
    var o = a.getElementsByClassName("counter-value")[0];
    return o.innerHTML = t.value, addDataset(o, t, n), a;
}

function createIncrement(e, t, n, a) {
    var o = e.getElementsByClassName(t)[0];
    o.innerHTML = void 0 !== n ? n : a.increments, o.dataset.counter = a.id;
}

function addDataset(e, t, n) {
    var a, o;
    a = "null" === t.min ? "" : t.min, o = null === t.max ? "" : t.max, e.dataset.start = t.start, 
    e.dataset.min = a, e.dataset.max = o, e.dataset.value = t.value, e.dataset.playerIndex = n, 
    e.dataset.id = t.id;
}

function increment(i) {
    new Promise(function(e, t) {
        var n = getCounterValue(i), a = n.innerHTML, o = i.classList.contains("loss") ? "-" + i.innerHTML : i.innerHTML;
        a = parseInt(a, 10) + parseInt(o, 10), data = n.dataset;
        var r = data.min, l = data.max;
        "null" !== r && null != r && "" !== r && (a = parseInt(a, 10) >= parseInt(r, 10) ? a : r), 
        "null" !== l && null != l && "" !== l && (a = parseInt(a, 10) <= parseInt(l, 10) ? a : l), 
        n.innerHTML = a, n.dataset.value = a, e(data);
    }).then(function(e) {
        var t = getCookie(recentGameCookie), n = t[e.playerIndex];
        e.id === n.primary.id && (n.primary.value = e.value), checkCounters(n.secondary, e), 
        checkCounters(n.tertiary, e), t[e.playerIndex] = n, setCookie(recentGameCookie, t);
    });
}

function checkCounters(e, t) {
    for (var n = 0; n < e.length; n++) t.id === e[n].id && (e[n].value = t.value);
}

function activatePlayer() {
    for (var e = document.getElementById("player-tabs"), t = 0; t < e.childElementCount; t++) for (var n = e.childNodes[t], a = 0; a < n.childElementCount; a++) {
        var o = n.childNodes[a].getElementsByTagName("input")[0];
        document.getElementsByClassName(o.id)[0].classList.toggle("active", o.checked);
    }
}

function getCounterValue(e) {
    for (var t = null, n = e.parentNode; null === t; ) n.classList.contains("primary") || n.classList.contains("secondary") || n.classList.contains("tertiary") ? t = n.getElementsByClassName("counter-value")[0] : n = n.parentNode;
    return t;
}

function domLoad(e) {
    var t, n = e.name;
    switch (void 0 === e.cookie && null === e.cookie || (t = getCookie(e.cookie)), console.log("pop: " + n), 
    n) {
      case "actionPrompt":
        actionPrompt();
        break;

      case "numPlayers":
        openNumPlayerSelect(t);
        break;

      case "playerNames":
        enterPlayerNames(t);
        break;

      case "gameSelect":
        openGameSelect(t);
        break;

      case "dice":
        openDice(t);
        break;

      case "game":
        openGame(t);
    }
}

function newState(e, t) {
    var n = {
        name: e,
        cookie: t
    };
    console.log("push: " + e), history.pushState(n, null, null);
}

function toggleShow(e) {
    document.getElementById(e).classList.toggle("show");
}

function toggleCover(e) {
    document.getElementById(e).classList.toggle("hide");
}

function toggleFabMenu() {
    rotateIcon(document.getElementById("fab")), toggleShow("fab-menu-items"), toggleCover("fab-menu-items-active");
}

function toggleHamMenu() {
    toggleShow("menu"), toggleCover("menu-active");
}

function openRandPlayer(o) {
    clearScreen(), loadFile("templates", "template/random-player-selector.html").then(function(e) {
        newTemplate("rand-player-selection-template", [], document.getElementById("content"));
        for (var t, n = document.getElementById("rand-player-selection"), a = 0; a < o.length; a++) a % 2 == 0 && (t = createRandInputGroup(n)), 
        addPlayer(a, o, t);
    });
}

function createRandInputGroup(e) {
    var t = document.createElement("div");
    return t.classList.add("horizontal-name-selection"), t.classList.add("tabGroup1"), 
    e.appendChild(t), t;
}

function addPlayer(e, t, n) {
    var a = convertToElement(document.getElementById("rand-player-template").innerHTML), o = "rand-player-option" + e, r = a.getElementsByTagName("input")[0];
    r.setAttribute("id", o), r.value = t[e].playerName;
    var l = a.getElementsByTagName("label")[0];
    l.setAttribute("for", o), l.innerHTML = t[e].playerName, appendChildNodes(a, n);
}

function selectAllPlayers() {
    selectAll(document.getElementsByName("rand-player-selection"));
}

function randPlayer() {
    var e = whichAreChecked(document.getElementsByName("rand-player-selection"));
    if (0 < e.length) {
        var t = Math.floor(Math.random() * e.length);
        alert("Player", e[t].value, "anounce", 5e3);
    } else alert("Error", "At least one player must be selected.", "error", 3e3);
}

function convertToElement(e) {
    var t = document.createElement("div");
    return t.innerHTML = e, t;
}

function appendChildNodes(e, t) {
    for (;e.firstChild; ) {
        var n = e.firstChild;
        e.removeChild(n), 3 !== n.nodeType && t.appendChild(n);
    }
}

function loadFile(r, l, i) {
    return new Promise(function(n, a) {
        var o = new XMLHttpRequest();
        o.open("GET", l, !0), o.onload = function() {
            200 !== o.status && a(Error(o.statusText));
            var e = document.getElementById(r), t = convertToElement(o.response);
            t.dataset.temp = l, 1 === i ? e.appendChild(t.childNodes[0]) : checkForTemplates(e, t) && e.appendChild(t), 
            n(o.response);
        }, o.onerror = function() {
            a(Error("Network Error"));
        }, o.send();
    });
}

function loadFileContents(a) {
    return new Promise(function(e, t) {
        var n = new XMLHttpRequest();
        n.open("GET", a, !0), n.onload = function() {
            200 !== n.status && t(Error(n.statusText)), e(n.response);
        }, n.onerror = function() {
            t(Error("Network Error"));
        }, n.send();
    });
}

function newTemplate(e, t, n) {
    var a = convertToElement(document.getElementById(e).innerHTML);
    for (var o in t) {
        var r = t[o];
        a.getElementsByClassName(o)[0].innerHTML = r;
    }
    appendChildNodes(a, n);
}

function checkForTemplates(e, t) {
    for (var n = 0; n < e.childNodes.length; n++) if (t.dataset.temp === e.childNodes[n].dataset.temp) return !1;
    return !0;
}

function whichIsChecked(e) {
    for (var t = 0; t < e.length; t++) if (e[t].checked) return e[t];
}

function whichAreChecked(e) {
    for (var t = [], n = 0; n < e.length; n++) e[n].checked && (t[t.length] = e[n]);
    return t;
}

function selectAll(e) {
    for (var t = 0; t < e.length; t++) e[t].checked = !0;
}

function clearScreen() {
    document.getElementById("content").innerHTML = "";
}