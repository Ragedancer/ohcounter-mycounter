function revealCircle(a) {
    a.getElementsByClassName("circle")[0].classList.add("opened"), setTimeout(function() {
        document.getElementsByClassName("opened")[0].classList.remove("opened");
    }, 550);
}

function rotateIcon(a) {
    var b = a.getElementsByTagName("svg")[0];
    b.classList.contains("spinLeft") ? (b.classList.toggle("spinLeft", !1), b.classList.toggle("spinRight", !0)) : b.classList.contains("spinRight") ? (b.classList.toggle("spinLeft", !0), 
    b.classList.toggle("spinRight", !1)) : b.classList.toggle("spinLeft");
}

function buttonActionPrompt() {
    switch (whichIsChecked(document.getElementsByName("action-prompt-selection")).value) {
      case "resume":
        checkCookie(recentGameCookie) && openGame(getCookie(recentGameCookie));
        break;

      case "newGame":
        startNewGame(), newState("numPlayers", newGameCookie);
        break;

      default:
        startNewGame(), newState("numPlayers", newGameCookie);
    }
}

function buttonOpenEnterNames() {
    var a = readPlayerNumbers(), b = getCookie(newGameCookie);
    b.numPlayers = a, setCookie(newGameCookie, b), enterPlayerNames(b), newState("playerNames", newGameCookie);
}

function buttonOpenGameSelect() {
    var a = readPlayerNames(), b = getCookie(newGameCookie);
    b.playerNames = void 0 !== a ? a : null, setCookie(newGameCookie, b), openGameSelect(b), 
    newState("gameSelect", newGameCookie);
}

function buttonSelectRandPlayer() {
    randPlayer();
}

function buttonSelectAllRandPlayer() {
    selectAllPlayers();
}

function menuOpenDice() {
    toggleHamMenu(), openDice(), newState("dice");
}

function menuRandPlayer() {
    toggleHamMenu(), openRandPlayer(getCookie(recentGameCookie)), newState("randPlayer");
}

function menuResetGame() {
    toggleHamMenu(), resetGame();
}

function buttonPlayGame() {
    var a = document.getElementsByName("game-selection"), b = getCookie(newGameCookie), c = whichIsChecked(a);
    b.game = c.value, setCookie(newGameCookie, b), startGame(b);
}

function decrementCounter(a) {
    increment(a);
}

function incrementCounter(a) {
    increment(a);
}

function newCookie(a, b, c) {
    checkCookie(a) && !checkCookieContents(a, b) || setCookie(a, b, c);
}

function setCookie(a, b, c) {
    null == c && (c = 99999);
    var d = new Date();
    d.setTime(d.getTime() + 24 * c * 60 * 60 * 1e3);
    var e = "expires=" + d.toUTCString();
    document.cookie = a + "=" + JSON.stringify(b) + ";" + e + ";path=/";
}

function getCookie(a) {
    for (var b = a + "=", c = document.cookie.split(";"), d = 0; d < c.length; d++) {
        for (var e = c[d]; " " == e.charAt(0); ) e = e.substring(1);
        if (0 == e.indexOf(b)) return JSON.parse(e.substring(b.length, e.length));
    }
    return "";
}

function checkCookie(a) {
    return -1 !== document.cookie.indexOf(a + "=");
}

function checkCookieContents(a, b) {
    var c = JSON.stringify(getCookie(a));
    return JSON.stringify(b) !== c;
}

function openDice() {
    document.getElementById("content").innerHTML = "", loadFile("content", "template/dice.html", 1).then(function(a) {
        Promise.all([ loadFileContents("images/dice/d4.svg"), loadFileContents("images/dice/d6.svg"), loadFileContents("images/dice/d8.svg"), loadFileContents("images/dice/d10.svg"), loadFileContents("images/dice/d12.svg"), loadFileContents("images/dice/d20.svg"), loadFileContents("images/dice/Coin.svg") ]).then(function(a) {
            var b = document.getElementById("dice-holder");
            for (var c in a) b.appendChild(convertToElement(a[c]).childNodes[0]);
        });
    });
}

function rollDie(a) {
    var b = Math.floor(Math.random() * a) + 1;
    document.getElementById("result").innerHTML = b;
}

function rollDice() {
    var a = document.getElementById("dice"), b = Math.floor(Math.random() * a.value) + 1;
    document.getElementById("result").innerHTML = b;
}

function coinFlip() {
    var a = Math.floor(2 * Math.random()) + 1;
    document.getElementById("result").innerHTML = 1 == a ? "Heads" : "Tails";
}

function actionPrompt() {
    clearScreen();
    var a = document.getElementById("content");
    loadFile("templates", "template/action-prompt.html").then(function(b) {
        newTemplate("action-prompt-template", [], a), loadFileContents("lib/json/action-prompt.json").then(function(a) {
            for (var b = JSON.parse(a).options, c = document.getElementById("action-selection"), d = "action-option", e = "action-option-label", f = 0; f < b.length; f++) if ("resume" !== b[f].value || checkCookie(recentGameCookie)) {
                newTemplate("action-template", [], c);
                var g = document.getElementById(d);
                g.setAttribute("value", b[f].value), g.setAttribute("id", d + b[f].id);
                var h = document.getElementById(e);
                h.setAttribute("for", d + b[f].id), h.setAttribute("id", e + b[f].id), h.innerHTML = b[f].name;
            }
            c.getElementsByTagName("input")[0].checked = !0;
        });
    });
}

function startNewGame() {
    loadFileContents("lib/json/game-creation-cookie-template.json").then(function(a) {
        var b = JSON.parse(a);
        checkCookie(newGameCookie) ? b = getCookie(newGameCookie) : newCookie(newGameCookie, b, .0069), 
        openNumPlayerSelect(b);
    });
}

function newGame() {
    toggleHamMenu(), openNumPlayerSelect(getCookie(newGameCookie));
}

function openNumPlayerSelect(a) {
    loadFile("templates", "template/num-player-select.html").then(function(b) {
        var c = document.getElementById("content");
        if (clearScreen(), newTemplate("num-players-template", [], c), null !== a.numPlayers) {
            var d = document.getElementsByName("player-selection");
            for (var e in d) "player-option-" + a.numPlayers === d[e].id && (d[e].checked = !0);
        }
    }, function(a) {
        console.error("Failed!", a);
    });
}

function readPlayerNumbers() {
    return whichIsChecked(document.getElementsByName("player-selection")).value;
}

function enterPlayerNames(a) {
    var b = document.getElementById("content");
    clearScreen(), newTemplate("player-names-template", [], b);
    for (var c = document.getElementsByClassName("player-names-input")[0], d = 0; d < a.numPlayers; d++) {
        newTemplate("new-name-template", [], c);
        var e = document.getElementById("player");
        e.setAttribute("name", "player" + d), e.setAttribute("id", "player" + d);
        var f = document.getElementById("playerLabel");
        if (f.setAttribute("for", "player" + d), f.setAttribute("id", "playerLabel" + d), 
        null !== a.playerNames) {
            var g = a.playerNames[d];
            e.value = void 0 != g ? g : "";
        }
    }
}

function readPlayerNames() {
    for (var a = document.getElementsByClassName("player-name"), b = [], c = 0; c < a.length; c++) {
        var d = document.getElementById("player" + c).value;
        b[c] = d;
    }
    return b;
}

function openGameSelect(a) {
    loadFile("templates", "template/game-select.html").then(function(b) {
        var c = document.getElementById("content");
        clearScreen(), newTemplate("game-selection-template", [], c), loadFileContents("lib/json/game-list.json").then(function(b) {
            for (var c = JSON.parse(b).games, d = document.getElementById("game-selection"), e = 0; e < c.length; e++) {
                newTemplate("game-template", [], d);
                var f = document.getElementById("game-option");
                f.setAttribute("value", c[e].name), f.setAttribute("id", "game-option" + c[e].id), 
                0 !== c[e].id && c[e].name !== a.game || (f.checked = !0);
                var g = document.getElementById("game-option-label");
                g.setAttribute("for", "game-option" + c[e].id), g.setAttribute("id", "game-option-label" + c[e].id), 
                g.innerHTML = c[e].name;
            }
        }, function(a) {
            console.error("Failed to load game-list");
        });
    }, function(a) {
        console.error("Failed to load game-select!", a);
    });
}

function startGame(a) {
    createGameCookie(a).then(function(a) {
        openGame(a);
    }), newState("game", recentGameCookie);
}

function createGameCookie(a) {
    return new Promise(function(b, c) {
        var d = "games/MTG-Commander.json";
        loadFileContents("lib/json/game-list.json").then(function(b) {
            for (var c = JSON.parse(b).games, e = 0; e < c.length; e++) a.game === c[e].name && (d = c[e].template);
        }).then(function() {
            loadFileContents("lib/json/" + d).then(function(c) {
                for (var d = c, e = a.numPlayers, f = [], g = 0; g < e; g++) f[g] = JSON.parse(d), 
                f[g].playerName = a.playerNames[g], resetCounter(f[g].primary), resetCounters(f[g].secondary), 
                resetCounters(f[g].tertiary);
                setCookie(recentGameCookie, f), b(f);
            });
        });
    });
}

function resetCounter(a) {
    a.value = a.start;
}

function resetCounters(a) {
    for (var b = 0; b < a.length; b++) a[b].value = a[b].start;
}

function resetGame() {
    for (var a = getCookie(recentGameCookie), b = 0; b < a.length; b++) resetCounter(a[b].primary), 
    resetCounters(a[b].secondary), resetCounters(a[b].tertiary);
    setCookie(recentGameCookie, a), openGame(a);
}

function openGame(a) {
    clearScreen(), setUpGame(a);
}

function setUpGame(a) {
    loadFile("templates", "template/game.html").then(function(b) {
        var c = a.length, d = document.createElement("div");
        d.setAttribute("id", "player-tabs");
        var e = document.createElement("div");
        e.classList.add("horizontal-name-selection"), e.classList.add("tabGroup1"), e.classList.add("input-invert");
        var f = document.createElement("div");
        f.classList.add("horizontal-name-selection"), f.classList.add("tabGroup2"), f.classList.add("input-invert");
        var g = document.createElement("div");
        g.setAttribute("id", "players");
        for (var h = 0; h < c; h++) {
            var i = a[h], j = convertToElement(document.getElementById("player-tab-template").innerHTML);
            j.getElementsByClassName("item")[0].classList.add("item-" + c);
            var k = j.getElementsByTagName("label")[0];
            k.setAttribute("for", "player" + h), k.innerHTML = i.playerName;
            var l = j.getElementsByTagName("input")[0];
            l.setAttribute("id", "player" + h);
            var m = document.createElement("div");
            m.classList.add("player"), m.classList.add(l.id), 0 === h && (l.checked = !0);
            var n = i.primary;
            n.increments.length > 1 ? createCounterGroup("p-multi-template", n, m, h) : createCounter("p-single-template", n, m, h);
            for (var o = i.secondary, p = 0; p < o.length; p++) {
                var q = o[p];
                q.increments.length > 1 ? createCounterGroup("s-multi-template", q, m, h) : createCounter("s-single-template", q, m, h);
            }
            for (var r = i.tertiary, s = 0; s < r.length; s++) {
                createCounter("t-single-template", r[s], m, h);
            }
            h > 3 ? appendChildNodes(j, f) : appendChildNodes(j, e), g.appendChild(m);
        }
        d.appendChild(e), c > 4 && d.appendChild(f), document.getElementById("content").appendChild(d), 
        document.getElementById("content").appendChild(g), document.getElementsByClassName("player")[0].classList.add("active");
    });
}

function createCounterGroup(a, b, c, d) {
    for (var e = createCounterValueGroup(a, b, d), f = e.getElementsByClassName("multi-counter")[0], g = 0; g < b.increments.length; g++) {
        var h = convertToElement(document.getElementById("increment-group-template").innerHTML), i = b.increments[g];
        createIncrement(h, "loss", i, b), createIncrement(h, "gain", i, b), appendChildNodes(h, f);
    }
    appendChildNodes(e, c);
}

function createCounter(a, b, c, d) {
    var e = createCounterValueGroup(a, b, d), f = b.increments[0];
    createIncrement(e, "loss", f, b), createIncrement(e, "gain", f, b), appendChildNodes(e, c);
}

function createCounterValueGroup(a, b, c) {
    var d = convertToElement(document.getElementById(a).innerHTML);
    d.getElementsByClassName("counter-name")[0].innerHTML = b.name;
    var e = d.getElementsByClassName("counter-value")[0];
    return e.innerHTML = b.value, addDataset(e, b, c), d;
}

function createIncrement(a, b, c, d) {
    var e = a.getElementsByClassName(b)[0];
    e.innerHTML = void 0 !== c ? c : d.increments, e.dataset.counter = d.id;
}

function addDataset(a, b, c) {
    var d, e;
    d = "null" === b.min ? "" : b.min, e = null === b.max ? "" : b.max, a.dataset.start = b.start, 
    a.dataset.min = d, a.dataset.max = e, a.dataset.value = b.value, a.dataset.playerIndex = c, 
    a.dataset.id = b.id;
}

function increment(a) {
    new Promise(function(b, c) {
        var d = getCounterValue(a), e = d.innerHTML, f = a.classList.contains("loss") ? "-" + a.innerHTML : a.innerHTML;
        e = parseInt(e, 10) + parseInt(f, 10), data = d.dataset;
        var g = data.min, h = data.max;
        "null" !== g && null !== g && void 0 !== g && "" !== g && (e = parseInt(e, 10) >= parseInt(g, 10) ? e : g), 
        "null" !== h && null !== h && void 0 !== h && "" !== h && (e = parseInt(e, 10) <= parseInt(h, 10) ? e : h), 
        d.innerHTML = e, d.dataset.value = e, b(data);
    }).then(function(a) {
        var b = getCookie(recentGameCookie), c = b[a.playerIndex];
        a.id === c.primary.id && (c.primary.value = a.value), checkCounters(c.secondary, a), 
        checkCounters(c.tertiary, a), b[a.playerIndex] = c, setCookie(recentGameCookie, b);
    });
}

function checkCounters(a, b) {
    for (var c = 0; c < a.length; c++) b.id === a[c].id && (a[c].value = b.value);
}

function activatePlayer() {
    for (var a = document.getElementById("player-tabs"), b = 0; b < a.childElementCount; b++) for (var c = a.childNodes[b], d = 0; d < c.childElementCount; d++) {
        var e = c.childNodes[d].getElementsByTagName("input")[0], f = document.getElementsByClassName(e.id)[0];
        f.classList.toggle("active", e.checked);
    }
}

function getCounterValue(a) {
    for (var b = null, c = a.parentNode; null === b; ) c.classList.contains("primary") || c.classList.contains("secondary") || c.classList.contains("tertiary") ? b = c.getElementsByClassName("counter-value")[0] : c = c.parentNode;
    return b;
}

function domLoad(a) {
    var b, c, d = a.name;
    switch (void 0 === a.cookie && null === a.cookie || (b = a.cookie, c = getCookie(b)), 
    console.log("pop: " + d), d) {
      case "actionPrompt":
        actionPrompt();
        break;

      case "numPlayers":
        openNumPlayerSelect(c);
        break;

      case "playerNames":
        enterPlayerNames(c);
        break;

      case "gameSelect":
        openGameSelect(c);
        break;

      case "dice":
        openDice(c);
        break;

      case "game":
        openGame(c);
    }
}

function newState(a, b) {
    var c = {
        name: a,
        cookie: b
    };
    console.log("push: " + a), history.pushState(c, null, null);
}

function toggleShow(a) {
    document.getElementById(a).classList.toggle("show");
}

function toggleCover(a) {
    document.getElementById(a).classList.toggle("hide");
}

function toggleFabMenu() {
    rotateIcon(document.getElementById("fab")), toggleShow("fab-menu-items"), toggleCover("fab-menu-items-active");
}

function toggleHamMenu() {
    toggleShow("menu"), toggleCover("menu-active");
}

function openRandPlayer(a) {
    clearScreen(), loadFile("templates", "template/random-player-selector.html").then(function(b) {
        newTemplate("rand-player-selection-template", [], document.getElementById("content"));
        for (var c, d = document.getElementById("rand-player-selection"), e = 0; e < a.length; e++) e % 2 == 0 && (c = createRandInputGroup(d)), 
        addPlayer(e, a, c);
    });
}

function createRandInputGroup(a) {
    var b = document.createElement("div");
    return b.classList.add("horizontal-name-selection"), b.classList.add("tabGroup1"), 
    a.appendChild(b), b;
}

function addPlayer(a, b, c) {
    var d = convertToElement(document.getElementById("rand-player-template").innerHTML), e = "rand-player-option" + a, f = d.getElementsByTagName("input")[0];
    f.setAttribute("id", e), f.value = b[a].playerName;
    var g = d.getElementsByTagName("label")[0];
    g.setAttribute("for", e), g.innerHTML = b[a].playerName, appendChildNodes(d, c);
}

function selectAllPlayers() {
    selectAll(document.getElementsByName("rand-player-selection"));
}

function randPlayer() {
    var a = whichAreChecked(document.getElementsByName("rand-player-selection"));
    if (a.length > 0) {
        var b = Math.floor(Math.random() * a.length);
        alert(a[b].value);
    } else alert("At least one player must be selected.");
}

function convertToElement(a) {
    var b = document.createElement("div");
    return b.innerHTML = a, b;
}

function appendChildNodes(a, b) {
    for (;a.firstChild; ) {
        var c = a.firstChild;
        a.removeChild(c), 3 !== c.nodeType && b.appendChild(c);
    }
}

function loadFile(a, b, c) {
    return new Promise(function(d, e) {
        var f = new XMLHttpRequest();
        f.open("GET", b, !0), f.onload = function() {
            200 !== f.status && e(Error(f.statusText));
            var b = document.getElementById(a);
            1 === c ? b.appendChild(convertToElement(f.response).childNodes[0]) : b.appendChild(convertToElement(f.response)), 
            d(f.response);
        }, f.onerror = function() {
            e(Error("Network Error"));
        }, f.send();
    });
}

function loadFileContents(a) {
    return new Promise(function(b, c) {
        var d = new XMLHttpRequest();
        d.open("GET", a, !0), d.onload = function() {
            200 !== d.status && c(Error(d.statusText)), b(d.response);
        }, d.onerror = function() {
            c(Error("Network Error"));
        }, d.send();
    });
}

function newTemplate(a, b, c) {
    var d = document.getElementById(a).innerHTML, e = convertToElement(d);
    for (var f in b) {
        var g = b[f];
        e.getElementsByClassName(f)[0].innerHTML = g;
    }
    appendChildNodes(e, c);
}

function newTemplateArray(a, b, c) {
    for (var d in b) newTemplate(a, b[d], c);
}

function whichIsChecked(a) {
    for (var b = 0; b < a.length; b++) if (a[b].checked) return a[b];
}

function whichAreChecked(a) {
    for (var b = [], c = 0; c < a.length; c++) a[c].checked && (b[b.length] = a[c]);
    return b;
}

function selectAll(a) {
    for (var b = 0; b < a.length; b++) a[b].checked = !0;
}

function clearScreen() {
    document.getElementById("content").innerHTML = "";
}

var newGameCookie = "GameInitCookie";

document.addEventListener("DOMContentLoaded", function() {
    actionPrompt(), newState("actionPrompt"), window.addEventListener("popstate", function(a) {
        domLoad(a.state);
    });
});

var recentGameCookie = "RecentGame";